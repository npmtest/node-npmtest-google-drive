{"/home/travis/build/npmtest/node-npmtest-google-drive/test.js":"/* istanbul instrument in package npmtest_google_drive */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-google-drive/lib.npmtest_google_drive.js":"/* istanbul instrument in package npmtest_google_drive */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_google_drive = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_google_drive = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-google-drive/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-google-drive && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_google_drive */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_google_drive\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_google_drive.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_google_drive.rollup.js'] =\n            local.assetsDict['/assets.npmtest_google_drive.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_google_drive.__dirname + '/lib.npmtest_google_drive.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-google-drive/node_modules/google-drive/lib/main.js":"\n//     node-google-drive\n//     Copyright (c) 2012- Nick Baugh <niftylettuce@gmail.com> (http://niftylettuce.com)\n//     MIT Licensed\n\n// Open source node.js module for accessing Google Drive's API:\n// <https://developers.google.com/drive/v1/reference/>\n\n// * Author: [@niftylettuce](https://twitter.com/#!/niftylettuce)\n// * Source: <https://github.com/niftylettuce/node-google-drive>\n\n// # node-google-drive\n\nvar base_uri = 'https://www.googleapis.com/drive/v2'\n  , request = require('request')\n\n\nfunction extend(a,b) {\n  for (var x in b) a[x] = b[x];\n  return a;\n}\n\nmodule.exports = function(access_token) {\n\n  var defaults = {\n    headers: {\n      Authorization: \"Bearer \" + access_token\n    },\n    qs: {}\n  }\n\n  function make_request(p, multipart) {\n    if (arguments.callee.length == 1) multipart = true;\n    var options = defaults;\n    options.qs = extend(options.qs, p.params);\n    if (multipart && p.meta) {\n      options.multipart = [{\n        'content-type': 'application/json',\n        body: JSON.stringify(p.meta)\n      }];\n    } else  {\n      options.headers['Content-Type'] = 'application/json';\n      options.body = JSON.stringify(p.meta);\n    }\n    return request.defaults(options);\n  }\n\n  function extract_params(meta, params, cb) {\n    if ((!cb) && (!params) && (typeof meta === 'function' ))\n      return {meta:{}, params: {}, cb: meta};\n    else if ((!cb) && (typeof params === 'function' ))\n      return {meta:meta, params: {}, cb: params};\n    else return {meta: meta, params:params, cb: cb};\n  }\n\n  var resources = {}\n\n  resources.files = function(fileId) {\n\n    return {\n      list: function(params, cb) {\n        var p = extract_params(undefined, params, cb);\n        return make_request(p).get(base_uri + '/files', p.cb);\n      },\n      insert: function(meta, params, cb) {\n        var p = extract_params(meta, params, cb);\n        return make_request(p).post(base_uri + '/files', p.cb);\n      },\n      get: function(params, cb) {\n        var p = extract_params(undefined, params, cb);\n        return make_request(p).get(base_uri + '/files/' + fileId, p.cb);\n      },\n      patch: function(meta, params, cb) {\n        var p = extract_params(meta, params, cb);\n        return make_request(p).patch(base_uri + '/files/' + fileId, p.cb);\n      },\n      update: function(meta, params, cb) {\n        var p = extract_params(meta, params, cb);\n        return make_request(p).put(base_uri + '/files/' + fileId, p.cb);\n      },\n      copy: function(meta, params, cb) {\n        var p = extract_params(meta, params, cb);\n        return make_request(p).post(base_uri + '/files/' + fileId + '/copy', p.cb);\n      },\n      del: function(cb) {\n        var p = extract_params(undefined, undefined, cb);\n        return make_request(p).del(base_uri + '/files/' + fileId, p.cb);\n      },\n      touch: function(cb) {\n        var p = extract_params(undefined, undefined, cb);\n        return make_request(p).post(base_uri + '/files/' + fileId, p.cb);\n      },\n      trash: function(cb) {\n        var p = extract_params(undefined, undefined, cb);\n        return make_request(p).post(base_uri + '/files/' + fileId + '/trash', p.cb);\n      },\n      untrash: function(cb) {\n        var p = extract_params(undefined, undefined, cb);\n        return make_request(p).post(base_uri + '/files/' + fileId + '/untrash', p.cb);\n      },\n\n      permissions: function(permId) {\n        return {\n          list: function(params, cb) {\n            var p = extract_params(undefined, params, cb);\n            return make_request(p).get(base_uri + '/files/' + fileId + '/permissions', p.cb);\n          },\n          patch: function(meta, params, cb) {\n            var p = extract_params(meta, params, cb);\n            return make_request(p).patch(base_uri + '/files/' + fileId + '/permissions/' + permId, p.cb);\n          },\n          update: function(meta, params, cb) {\n            var p = extract_params(meta, params, cb);\n            return make_request(p).put(base_uri + '/files/' + fileId + '/permissions/' + permId, p.cb);\n          },\n          insert: function(meta, params, cb) {\n            var p = extract_params(meta, params, cb);\n            return make_request(p).post(base_uri + '/files/' + fileId + '/permissions', p.cb);\n          },\n          getIdForEmail: function(email, params, cb) {\n            var p = extract_params(undefined, params, cb);\n            return make_request(p).get(base_uri + '/permissionIds/' + email, p.cb);\n          }\n        }\n      }\n    }\n  }\n  \n\t/*\n\t\tChanges\n\t\tFor Changes Resource details, see below about Resource representations.\n\t\tMethod\tHTTP request\tDescription\n\t\tURIs relative to https://www.googleapis.com/drive/v2, unless otherwise noted\n\t\tget\t\tGET  /changes/changeId\t \tGets a specific change.\n\t\tlist\tGET  /changes\t \t\t\tLists the changes for a user.\n\t\t\n\t\tResource representations\n\t\tRepresentation of a change to a file.\n\t\t{\n\t\t  \"kind\": \"drive#change\",\n\t\t  \"id\": long,\n\t\t  \"fileId\": string,\n\t\t  \"selfLink\": string,\n\t\t  \"deleted\": boolean,\n\t\t  \"file\": files Resource\n\t\t}\n\t\tProperty name\tValue\t\t\tDescription\tNotes\n\t\tkind\t\t\tstring\t\t\tThis is always drive#change.\t\n\t\tid\t\t\t\tlong\t\t\tThe ID of the change.\t\n\t\tfileId\t\t\tstring\t\t\tThe ID of the file associated with this change.\t\n\t\tselfLink\t\tstring\t\t\tA link back to this change.\t\n\t\tdeleted\t\t\tboolean\t\t\tWhether the file has been deleted.\t\n\t\tfile\t\t\tnested object\tThe updated state of the file. Present if the file has not been deleted.\n\t*/\n  \n\tresources.changes = function(changeId) {\n\t\treturn {\n\t\t\tlist: function(params, cb) {\n\t\t\t\tvar p = extract_params(undefined, params, cb);\n\t\t\t\treturn make_request(p).get(base_uri + '/changes', p.cb);\n\t\t\t},\n\t\t\tget: function(params, cb) {\n\t\t\t\tvar p = extract_params(undefined, params, cb);\n\t\t\t\treturn make_request(p).get(base_uri + '/changes/' + changeId, p.cb);\n\t\t\t}\n\t\t}\n\t}\n  \n  resources.changes.watch = function(channel_id, callback_address, token, ttl, params, cb) {\n    var body = {\n      id: channel_id,\n      type: \"web_hook\",\n      address: callback_address,\n      token:token,\n      params:{\n        ttl: ttl\n      }\n    }\n    var p = extract_params(body, params, cb);\n    return make_request(p, false).post(base_uri + '/changes/watch', p.cb);\n  }\n\n  return resources;\n}\n"}